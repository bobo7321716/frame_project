{"version":3,"sources":["assets\\homePage\\script\\manager\\RedPointManager.ts"],"names":[],"mappings":";;;;AAAA,iDAAiD;AACjD,yEAAyE;AACzE,qDAAqD;AACrD,yCAAyC;AACzC,kDAAkD;AAClD,gEAAgE;AAChE,2CAA2C;AAC3C,iDAAiD;AAEjD,+CAA+C;AAE/C,WAAW;AACX,8DAA8D;AAE9D,iDAAiD;AAEjD,iCAAiC;AACjC,sCAAsC;AACtC,sCAAsC;AACtC,gEAAgE;AAChE,QAAQ;AAER,sBAAsB;AACtB,8CAA8C;AAE9C,6CAA6C;AAC7C,8BAA8B;AAC9B,6DAA6D;AAC7D,6CAA6C;AAC7C,aAAa;AACb,gEAAgE;AAChE,QAAQ;AAER,wBAAwB;AACxB,sCAAsC;AACtC,oEAAoE;AACpE,+BAA+B;AAC/B,8BAA8B;AAC9B,6CAA6C;AAC7C,mDAAmD;AACnD,mEAAmE;AACnE,iEAAiE;AACjE,iDAAiD;AACjD,gGAAgG;AAChG,4CAA4C;AAC5C,4FAA4F;AAC5F,mEAAmE;AACnE,mDAAmD;AACnD,0FAA0F;AAC1F,+CAA+C;AAC/C,2FAA2F;AAC3F,oEAAoE;AACpE,iEAAiE;AACjE,qDAAqD;AACrD,6CAA6C;AAC7C,oCAAoC;AACpC,gCAAgC;AAChC,4BAA4B;AAC5B,6CAA6C;AAC7C,wBAAwB;AACxB,6BAA6B;AAC7B,0CAA0C;AAC1C,iEAAiE;AACjE,kEAAkE;AAClE,kDAAkD;AAClD,wEAAwE;AACxE,yDAAyD;AACzD,qCAAqC;AACrC,4BAA4B;AAC5B,wBAAwB;AACxB,6BAA6B;AAC7B,0CAA0C;AAC1C,0DAA0D;AAC1D,qDAAqD;AACrD,wBAAwB;AACxB,6BAA6B;AAC7B,8CAA8C;AAC9C,gEAAgE;AAChE,qDAAqD;AACrD,wBAAwB;AACxB,6BAA6B;AAC7B,iDAAiD;AAEjD,6BAA6B;AAC7B,gBAAgB;AAChB,aAAa;AACb,gEAAgE;AAChE,QAAQ;AACR,IAAI","file":"","sourceRoot":"/","sourcesContent":["// import GamingData from \"../common/GamingData\";\r\n// import { BoothType, EventEnum, RedPointType } from \"../common/Global\";\r\n// import { PlayerData } from \"../common/PlayerData\";\r\n// import { Util } from \"../common/Util\";\r\n// import { Gs_foodMgr } from \"../config/Gs_food\";\r\n// import { RedPointConfigMgr } from \"../config/RedPointConfig\";\r\n// import DataManager from \"./DataManager\";\r\n// import { EventManager } from \"./EventManager\";\r\n\r\n// const { ccclass, property } = cc._decorator;\r\n\r\n// @ccclass\r\n// export default class RedPointManager extends cc.Component {\r\n\r\n//     public static ins: RedPointManager = null;\r\n\r\n//     protected onLoad(): void {\r\n//         RedPointManager.ins = this;\r\n//         this.allShowRedPoints = [];\r\n//         EventManager.triggerEvent(EventEnum.RedPointRefresh);\r\n//     }\r\n\r\n//     /**所有需要显示的红点 */\r\n//     public allShowRedPoints: number[] = [];\r\n\r\n//     private showRedPoint(keys: number[]) {\r\n//         keys.forEach(v => {\r\n//             if (this.allShowRedPoints.includes(v)) return;\r\n//             this.allShowRedPoints.push(v);\r\n//         })\r\n//         EventManager.triggerEvent(EventEnum.RedPointRefresh);\r\n//     }\r\n\r\n//     checkRedPoint() {\r\n//         this.allShowRedPoints = [];\r\n//         let datas = DataManager.ins.get(RedPointConfigMgr).datas;\r\n//         datas.forEach(v => {\r\n//             switch (v.Id) {\r\n//                 case RedPointType.Recipes:\r\n//                     let isShow: boolean = false;\r\n//                     let enumArr = Util.getAllEnumNums(BoothType)\r\n//                     for (let i = 0; i < enumArr.length; i++) {\r\n//                         let type = enumArr[i];\r\n//                         let info = PlayerData.ins.unlockBoothInfos.find(v => v.type == type);\r\n//                         if (!info) break;\r\n//                         let datas = DataManager.ins.get(Gs_foodMgr).getDatasByType(type);\r\n//                         for (let i = 0; i < datas.length; i++) {\r\n//                             let data = datas[i];\r\n//                             let dishInfo = info.unlockDishs.find(v => v.id == data.Id);\r\n//                             if (!dishInfo) {\r\n//                                 let num = PlayerData.ins.getItemNum(data.Ulockgrade.id);\r\n//                                 if (num >= data.Ulockgrade.num) {\r\n//                                     this.showRedPoint(v.keys);\r\n//                                     isShow = true;\r\n//                                     break;\r\n//                                 }\r\n//                             }\r\n//                         }\r\n//                         if (isShow) break;\r\n//                     }\r\n//                     break;\r\n//                 case RedPointType.Task:\r\n//                     let taskList = PlayerData.ins.curTaskList;\r\n//                     for (let i = 0; i < taskList.length; i++) {\r\n//                         let task = taskList[i];\r\n//                         if (task.progress >= task.task.Param.value) {\r\n//                             this.showRedPoint(v.keys);\r\n//                             break;\r\n//                         }\r\n//                     }\r\n//                     break;\r\n//                 case RedPointType.Game:\r\n//                     if (PlayerData.ins.gameStep >= 1) {\r\n//                         this.showRedPoint(v.keys);\r\n//                     }\r\n//                     break;\r\n//                 case RedPointType.New_skin:\r\n//                     if (PlayerData.ins.newSkins.length > 0) {\r\n//                         this.showRedPoint(v.keys);\r\n//                     }\r\n//                     break;\r\n//                 case RedPointType.Dish_finish:\r\n\r\n//                     break;\r\n//             }\r\n//         })\r\n//         EventManager.triggerEvent(EventEnum.RedPointRefresh);\r\n//     }\r\n// }\r\n"]}