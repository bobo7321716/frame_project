{"version":3,"sources":["assets\\homePage\\script\\common\\MyToggleItem.ts"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;AAAM,IAAA,KAAwB,EAAE,CAAC,UAAU,EAAnC,OAAO,aAAA,EAAE,QAAQ,cAAkB,CAAC;AAG5C;IAA0C,gCAAY;IAAtD;QAAA,qEAgCC;QA9BG,iBAAW,GAAY,IAAI,CAAC;QAG5B,iBAAW,GAAc,IAAI,CAAC;QAG9B,gBAAU,GAA8B,IAAI,CAAC;QAErC,cAAQ,GAAG,KAAK,CAAC;QAWzB,eAAS,GAAsC,IAAI,CAAC;;IAWxD,CAAC;IArBG,sBAAI,iCAAO;aAAX;YACI,OAAO,IAAI,CAAC,QAAQ,CAAC;QACzB,CAAC;aAED,UAAY,CAAU;YAClB,IAAI,CAAC,QAAQ,GAAG,CAAC,CAAC;YAClB,IAAI,IAAI,CAAC,WAAW;gBAAE,IAAI,CAAC,WAAW,CAAC,MAAM,GAAG,CAAC,CAAC;YAClD,IAAI,IAAI,CAAC,WAAW;gBAAE,IAAI,CAAC,WAAW,CAAC,OAAO,GAAG,CAAC,CAAC,CAAC;QACxD,CAAC;;;OANA;IAUS,6BAAM,GAAhB;QACI,IAAI,CAAC,IAAI,CAAC,EAAE,CAAC,EAAE,CAAC,IAAI,CAAC,SAAS,CAAC,WAAW,EAAE,IAAI,CAAC,YAAY,EAAE,IAAI,CAAC,CAAC;IACzE,CAAC;IAED,mCAAY,GAAZ,UAAa,KAAe;;QACxB,IAAI,IAAI,CAAC,SAAS,IAAI,CAAC,IAAI,CAAC,SAAS,CAAC,IAAI,CAAC;YAAE,OAAO;QACpD,IAAI,CAAC,OAAO,GAAG,CAAC,IAAI,CAAC,OAAO,CAAC;QAC7B,MAAA,IAAI,CAAC,UAAU,0CAAE,IAAI,CAAC,CAAC,IAAI,CAAC,UAAU,CAAC,eAAe,CAAC,EAAC;IAC5D,CAAC;IA7BD;QADC,QAAQ,CAAC,EAAE,CAAC,IAAI,CAAC;qDACU;IAG5B;QADC,QAAQ,CAAC,EAAE,CAAC,MAAM,CAAC;qDACU;IAG9B;QADC,QAAQ,CAAC,EAAE,CAAC,SAAS,CAAC,YAAY,CAAC;oDACS;IAO7C;QADC,QAAQ,CAAC,EAAE,CAAC,OAAO,CAAC;+CAKpB;IAnBgB,YAAY;QADhC,OAAO;OACa,YAAY,CAgChC;IAAD,mBAAC;CAhCD,AAgCC,CAhCyC,EAAE,CAAC,SAAS,GAgCrD;kBAhCoB,YAAY","file":"","sourceRoot":"/","sourcesContent":["const { ccclass, property } = cc._decorator;\r\n\r\n@ccclass\r\nexport default class MyToggleItem extends cc.Component {\r\n    @property(cc.Node)\r\n    checkedNode: cc.Node = null;\r\n\r\n    @property(cc.Sprite)\r\n    unCheckNode: cc.Sprite = null;\r\n\r\n    @property(cc.Component.EventHandler)\r\n    checkEvent: cc.Component.EventHandler = null;\r\n\r\n    private _checked = false;\r\n    get checked() {\r\n        return this._checked;\r\n    }\r\n    @property(cc.Boolean)\r\n    set checked(v: boolean) {\r\n        this._checked = v;\r\n        if (this.checkedNode) this.checkedNode.active = v;\r\n        if (this.unCheckNode) this.unCheckNode.enabled = !v;\r\n    }\r\n\r\n    onChecked: (toggle: MyToggleItem) => boolean = null;\r\n\r\n    protected onLoad(): void {\r\n        this.node.on(cc.Node.EventType.TOUCH_START, this.onTouchStart, this);\r\n    }\r\n\r\n    onTouchStart(event: cc.Touch) {\r\n        if (this.onChecked && !this.onChecked(this)) return;\r\n        this.checked = !this.checked;\r\n        this.checkEvent?.emit([this.checkEvent.customEventData])\r\n    }\r\n}\r\n"]}