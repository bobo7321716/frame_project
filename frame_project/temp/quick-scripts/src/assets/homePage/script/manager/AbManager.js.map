{"version":3,"sources":["assets\\homePage\\script\\manager\\AbManager.ts"],"names":[],"mappings":"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","file":"","sourceRoot":"/","sourcesContent":["import { BundleData } from \"../common/BundleData\";\r\nimport TipManager from \"./TipManager\";\r\n\r\nexport class AbManager {\r\n\r\n    /**是否自动释放资源 */\r\n    static isAutoReleaseAsset: boolean = false;\r\n\r\n    //记录加载过的资源\r\n    private static resUuidMap: Map<string, cc.Asset> = new Map();\r\n\r\n    private static bundleMap: Map<string, Promise<cc.AssetManager.Bundle>> = new Map();\r\n\r\n    public static getBundle(bundleName: string): Promise<cc.AssetManager.Bundle> {\r\n        if (!bundleName) {\r\n            return Promise.resolve(null);\r\n        }\r\n\r\n        let targetBundle = cc.assetManager.getBundle(bundleName);\r\n        if (targetBundle) {\r\n            return Promise.resolve(targetBundle);\r\n        }\r\n\r\n        if (this.bundleMap.has(bundleName)) {\r\n            return this.bundleMap.get(bundleName);\r\n        }\r\n\r\n        let self = this;\r\n        this.bundleMap.set(bundleName, new Promise<cc.AssetManager.Bundle>(\r\n            (resolve, reject) => {\r\n                cc.assetManager.loadBundle(bundleName, (error, bundle) => {\r\n                    if (error) {\r\n                        resolve(null);\r\n                    } else {\r\n                        resolve(bundle);\r\n                    }\r\n                    self.bundleMap.delete(bundleName);\r\n                });\r\n            }\r\n        ));\r\n\r\n        return this.bundleMap.get(bundleName);\r\n    }\r\n\r\n    private static loadSubIndex: number = 0;\r\n\r\n    /**\r\n     * 加载子包\r\n     * @param bundleList 子包名称列表\r\n     * ## 请确保子包列表已按照优先级排序\r\n     */\r\n    public static loadSubPackage(bundleList: Array<string>): Promise<boolean> {\r\n        if (!bundleList || bundleList.length <= 0) {\r\n            console.error(\"bundle list not exist or length less zero\");\r\n            return Promise.resolve(null);\r\n        }\r\n        this.loadSubIndex = 0;\r\n        let self = this;\r\n        return new Promise<boolean>(\r\n            (resolve, reject) => {\r\n                self.circleLoadBundle(bundleList, resolve);\r\n            }\r\n        );\r\n    }\r\n\r\n    private static circleLoadBundle(bundleList: Array<string>, resolve): void {\r\n        let self = this;\r\n        let bundleName = bundleList[self.loadSubIndex];\r\n        this.getBundle(bundleName).then((bundle: cc.AssetManager.Bundle) => {\r\n            if (!bundle) {\r\n                self.circleLoadBundle(bundleList, resolve);\r\n            } else {\r\n                console.log(\"分包 \" + bundleName + \" 加载完成\")\r\n                self.loadSubIndex++;\r\n                if (self.loadSubIndex < bundleList.length) {\r\n                    self.circleLoadBundle(bundleList, resolve);\r\n                    return;\r\n                }\r\n                resolve(true);\r\n            }\r\n        })\r\n    }\r\n\r\n    /**\r\n     * 添加重试和超时的资源加载方法\r\n     * @param retryTimes 重试次数\r\n     * @param loadOutTime 超时时长（毫秒）\r\n     * @param tipOutTime 提示超时时长（毫秒）\r\n     * @returns 加载成功进resolve，返回资源，失败进reject，返回null\r\n     */\r\n    public static async loadBundleResWitchTimeout(bundleName: string, url: string, assetsType: typeof cc.Asset, isAddRef: boolean = true, retryTimes: number = 3, loadOutTime: number = 10000, tipOutTime: number = 2000): Promise<any> {\r\n        let result: cc.AssetManager.Bundle = await this.getBundle(bundleName);\r\n        if (!result) {\r\n            console.error(\"can not get target bundle\");\r\n            return Promise.reject(null);\r\n        }\r\n        return new Promise((resolve, reject) => {\r\n            let tipTimeOut = null;\r\n            if (tipOutTime > 0) {\r\n                tipTimeOut = setTimeout(() => {\r\n                    TipManager.ins.showTip(\"资源加载中，请稍后\");\r\n                }, tipOutTime);\r\n            }\r\n            let isTimeOut: boolean = false;\r\n            let loadTimeOut = setTimeout(() => {\r\n                isTimeOut = true;\r\n                console.warn(\"loadTimeOut\", url)\r\n                clearTimeout(tipTimeOut);\r\n                reject(null);\r\n            }, loadOutTime);\r\n\r\n            let retry = 0;\r\n            let retryCall = (asset: cc.Asset) => {\r\n                if (asset) {\r\n                    // console.warn(\"加载成功\", url)\r\n                    clearTimeout(loadTimeOut);\r\n                    clearTimeout(tipTimeOut);\r\n                    resolve(asset);\r\n                } else {\r\n                    if (!isTimeOut) {\r\n                        retry++;\r\n                        if (retry >= retryTimes) {\r\n                            clearTimeout(loadTimeOut);\r\n                            clearTimeout(tipTimeOut);\r\n                            console.warn(\"加载失败\", url)\r\n                            reject(null);\r\n                        } else {\r\n                            setTimeout(() => {\r\n                                this.loadBundleRes(bundleName, url, assetsType, isAddRef).then(retryCall);\r\n                            }, 200);\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n            this.loadBundleRes(bundleName, url, assetsType, isAddRef).then(retryCall);\r\n        })\r\n    }\r\n\r\n    /**\r\n     * 加载某一bundle路径下的单一资源 \r\n     * @param bundleName bundle名称\r\n     * @param url bundle下的资源路径\r\n     * @param assetType 资源类型\r\n     * @param isAddRef 是否增加引用计数\r\n     */\r\n    public static async loadBundleRes(bundleName: string, url: string, assetType: typeof cc.Asset, isAddRef: boolean = true): Promise<any> {\r\n        let bundle: cc.AssetManager.Bundle = await this.getBundle(bundleName);\r\n        if (!bundle) {\r\n            console.error(\"can not get target bundle\");\r\n            return Promise.resolve(null);\r\n        }\r\n        return new Promise<any>(\r\n            (resolve, reject) => {\r\n                bundle.load(url, assetType, (error, asset) => {\r\n                    if (error) {\r\n                        console.error(\"loadBundleRes 失败! bundleName : \", bundleName, \" url : \", url, error);\r\n                        resolve(null)\r\n                    } else {\r\n                        if (isAddRef && this.isAutoReleaseAsset) {\r\n                            asset.addRef();\r\n                            this.resUuidMap.set(asset._uuid, asset);\r\n                        }\r\n                        resolve(asset);\r\n                    }\r\n                });\r\n            }\r\n        );\r\n    }\r\n\r\n    /**加载资源,增加单个资源最小加载间隔\r\n     * interval:最小加载间隔 毫秒 \r\n     */\r\n    public static loadAssetsAddInterval(bundleName: string, url: string, assetsType: typeof cc.Asset, interval: number = 500): Promise<any> {\r\n        return new Promise((resolve, reject) => {\r\n            let timer = Date.now();\r\n            let loadPromise = this.loadBundleRes(bundleName, url, assetsType);\r\n            let delayPromise = new Promise((resolve, reject) => {\r\n                setTimeout(() => {\r\n                    resolve(null);\r\n                }, interval);\r\n            })\r\n            Promise.all([loadPromise, delayPromise]).then(() => {\r\n                console.log(\"loadPreAddInterval 加载耗时 \", url, Date.now() - timer);\r\n                resolve(null);\r\n            })\r\n        })\r\n    }\r\n\r\n    /**\r\n     * 加载某一bundle路径下某一文件夹下的所有资源\r\n     * @param bundleName bundle名称\r\n     * @param url bundle下的资源路径\r\n     * @param type 指定需要加载的资源类型\r\n     */\r\n    public static async loadBundleDir(bundleName: string, url: string, type?: typeof cc.Asset): Promise<any> {\r\n        let result: cc.AssetManager.Bundle = await this.getBundle(bundleName);\r\n        if (!result) {\r\n            console.error(\"can not get target bundle in loadBundleDir\");\r\n            return;\r\n        }\r\n\r\n        return new Promise<any>(\r\n            (resolve, reject) => {\r\n                if (type) {\r\n                    result.loadDir(url, type, (error, assets: cc.Asset[]) => {\r\n                        if (error) {\r\n                            console.error(\"loadBundleDir 失败! bundleName : \", bundleName, \" url : \", url);\r\n                            resolve(null)\r\n                        } else {\r\n                            resolve(assets);\r\n                        }\r\n                    });\r\n                } else {\r\n                    result.loadDir(url, (error, assets: cc.Asset[]) => {\r\n                        if (error) {\r\n                            console.error(\"loadBundleDir 失败! bundleName : \", bundleName, \" url : \", url);\r\n                            resolve(null)\r\n                        } else {\r\n                            resolve(assets);\r\n                        }\r\n                    });\r\n                }\r\n            }\r\n        );\r\n    }\r\n\r\n\r\n    /**\r\n     * 预加载某一bundle路径下的单一资源 \r\n     * @param bundleName bundle名称\r\n     * @param url bundle下的资源路径\r\n     * @param type 指定需要加载的资源类型\r\n     */\r\n    public static async preloadBundleRes(bundleName: string, url: string, type: typeof cc.Asset): Promise<any> {\r\n        let result: cc.AssetManager.Bundle = await this.getBundle(bundleName);\r\n        if (!result) {\r\n            console.error(\"can not get target bundle\");\r\n            return Promise.resolve(null);\r\n        }\r\n\r\n        return new Promise<any>(\r\n            (resolve, reject) => {\r\n                result.preload(url, type, (error, items) => {\r\n                    if (error) {\r\n                        console.error(\"preloadBundleRes 失败! bundleName : \", bundleName, \" url : \", url, error);\r\n                        resolve(null)\r\n                    } else {\r\n                        resolve(items);\r\n                    }\r\n                });\r\n            }\r\n        );\r\n    }\r\n\r\n\r\n    /**\r\n     * 预加载某一bundle路径下某一文件夹下的所有资源\r\n     * @param bundleName bundle名称\r\n     * @param url bundle下的资源路径\r\n     * @param type 指定需要加载的资源类型\r\n     */\r\n    public static async preloadBundleDir(bundleName: string, url: string, type?: typeof cc.Asset): Promise<any> {\r\n        let result: cc.AssetManager.Bundle = await this.getBundle(bundleName);\r\n        if (!result) {\r\n            console.error(\"can not get target bundle in loadBundleDir\");\r\n            return;\r\n        }\r\n\r\n        return new Promise<any>(\r\n            (resolve, reject) => {\r\n                if (type) {\r\n                    result.preloadDir(url, type, (error, items) => {\r\n                        if (error) {\r\n                            console.error(\"preloadBundleDir 失败! bundleName : \", bundleName, \" url : \", url);\r\n                            resolve(null)\r\n                        } else {\r\n                            resolve(items);\r\n                        }\r\n                    });\r\n                } else {\r\n                    result.preloadDir(url, (error, items) => {\r\n                        if (error) {\r\n                            console.error(\"preloadBundleDir 失败! bundleName : \", bundleName, \" url : \", url);\r\n                            resolve(null)\r\n                        } else {\r\n                            resolve(items);\r\n                        }\r\n                    });\r\n                }\r\n            }\r\n        );\r\n    }\r\n\r\n    /**预加载资源数组 */\r\n    public static preloadAssets(preloadRes: BundleData[], assetsType: typeof cc.Asset): Promise<any> {\r\n        let promiseArr = [];\r\n        for (let i = 0; i < preloadRes.length; i++) {\r\n            let bundleData = preloadRes[i];\r\n            let preLoadPromise = this.preloadBundleRes(bundleData.bundle, bundleData.url, assetsType);\r\n            promiseArr.push(preLoadPromise);\r\n        }\r\n        return Promise.all(promiseArr);\r\n    }\r\n\r\n    /**预加载资源,增加单个资源最小加载间隔\r\n     * interval:最小加载间隔 毫秒\r\n     */\r\n    public static preloadAssetsAddInterval(preloadRes: { bundleName: string, url: string }[], assetsType: typeof cc.Asset, interval: number = 500): Promise<any> {\r\n        return new Promise((resolve, reject) => {\r\n            let index = 0;\r\n            let timer = 0;\r\n            let call = () => {\r\n                timer = Date.now();\r\n                let bundleData = preloadRes[index];\r\n                let preLoadPromise = this.preloadBundleRes(bundleData.bundleName, bundleData.url, assetsType);\r\n                let delayPromise = new Promise((resolve, reject) => {\r\n                    setTimeout(() => {\r\n                        resolve(null);\r\n                    }, interval);\r\n                })\r\n                Promise.all([preLoadPromise, delayPromise]).then(() => {\r\n                    console.log(\"preloadPreAddInterval 加载耗时 \", bundleData.url, Date.now() - timer);\r\n                    index++;\r\n                    if (index < preloadRes.length) {\r\n                        call();\r\n                    } else {\r\n                        resolve(null);\r\n                    }\r\n                })\r\n            }\r\n            call();\r\n        })\r\n    }\r\n\r\n    /**加载远程资源 */\r\n    public static loadRemote(remoteUrl: string, assetsType?: typeof cc.Asset): Promise<any> {\r\n        return new Promise<any>(\r\n            (resolve, reject) => {\r\n                cc.assetManager.loadRemote(remoteUrl, assetsType, (error, assets: cc.Asset) => {\r\n                    if (error) {\r\n                        console.error(\"loadRemote 失败! remoteUrl : \", remoteUrl, error);\r\n                        resolve(null)\r\n                    } else {\r\n                        resolve(assets);\r\n                    }\r\n                });\r\n            }\r\n        );\r\n    }\r\n\r\n    public static loadBundleResArray(resInfo: { bundleName: string, url: string, assetsType: typeof cc.Asset, isAddRef: boolean }[]): Promise<any> {\r\n        let loadArr = [];\r\n        for (let data of resInfo) {\r\n            loadArr.push(this.loadBundleRes(data.bundleName, data.url, data.assetsType, data.isAddRef));\r\n        }\r\n        return Promise.all(loadArr);\r\n    }\r\n\r\n    /**释放bundle内所有资源，移除bundle */\r\n    public static async releaseBundle(bundleName: string) {\r\n        let bundle: cc.AssetManager.Bundle = await this.getBundle(bundleName);\r\n        if (!bundle) {\r\n            console.error(\"can not get target bundle in loadBundleDir\");\r\n            return;\r\n        }\r\n        bundle.releaseAll();\r\n        cc.assetManager.removeBundle(bundle);\r\n    }\r\n\r\n    /**回收资源时减少引用计数 */\r\n    public static decRef(uuid: string, decCount: number = 1) {\r\n        if (!this.isAutoReleaseAsset) return;\r\n        let asset = this.resUuidMap.get(uuid);\r\n        if (!asset) return;\r\n        for (let i = 0; i < decCount; i++) {\r\n            asset.decRef();\r\n        }\r\n        if (asset.refCount <= 0) {\r\n            this.resUuidMap.delete(uuid);\r\n        }\r\n    }\r\n\r\n}\r\n"]}