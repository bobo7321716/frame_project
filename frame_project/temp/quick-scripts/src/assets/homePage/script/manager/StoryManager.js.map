{"version":3,"sources":["assets\\homePage\\script\\manager\\StoryManager.ts"],"names":[],"mappings":";;;;AAAA,qDAAqD;AACrD,mDAAmD;AACnD,uEAAuE;AACvE,2CAA2C;AAC3C,iDAAiD;AACjD,2CAA2C;AAE3C,+CAA+C;AAE/C,WAAW;AACX,2DAA2D;AAE3D,yBAAyB;AACzB,iCAAiC;AAEjC,0BAA0B;AAC1B,iCAAiC;AAEjC,yBAAyB;AACzB,+BAA+B;AAE/B,8CAA8C;AAE9C,+CAA+C;AAC/C,oCAAoC;AACpC,wDAAwD;AACxD,qDAAqD;AACrD,6CAA6C;AAC7C,8BAA8B;AAC9B,iCAAiC;AACjC,gCAAgC;AAEhC,iCAAiC;AACjC,mCAAmC;AACnC,yCAAyC;AACzC,QAAQ;AAER,eAAe;AACf,qFAAqF;AACrF,yCAAyC;AACzC,aAAa;AACb,QAAQ;AAER,mEAAmE;AACnE,+HAA+H;AAC/H,oDAAoD;AACpD,6BAA6B;AAC7B,kGAAkG;AAClG,qCAAqC;AACrC,qDAAqD;AACrD,mDAAmD;AACnD,6EAA6E;AAC7E,mDAAmD;AACnD,+BAA+B;AAC/B,sDAAsD;AACtD,yCAAyC;AACzC,+BAA+B;AAC/B,sCAAsC;AACtC,wBAAwB;AACxB,qBAAqB;AACrB,gBAAgB;AAChB,0BAA0B;AAC1B,aAAa;AACb,QAAQ;AAER,qFAAqF;AACrF,wBAAwB;AACxB,8BAA8B;AAC9B,4BAA4B;AAC5B,oDAAoD;AACpD,8CAA8C;AAC9C,2DAA2D;AAC3D,gCAAgC;AAChC,sCAAsC;AACtC,aAAa;AACb,QAAQ;AAER,oBAAoB;AACpB,yCAAyC;AACzC,gCAAgC;AAChC,6CAA6C;AAC7C,kDAAkD;AAClD,YAAY;AACZ,wCAAwC;AACxC,uCAAuC;AACvC,4CAA4C;AAC5C,2FAA2F;AAC3F,+CAA+C;AAC/C,2BAA2B;AAC3B,oEAAoE;AACpE,6BAA6B;AAC7B,kBAAkB;AAClB,mBAAmB;AACnB,iCAAiC;AACjC,6BAA6B;AAC7B,wBAAwB;AACxB,YAAY;AACZ,uDAAuD;AACvD,gCAAgC;AAChC,iDAAiD;AACjD,kEAAkE;AAClE,mDAAmD;AACnD,gDAAgD;AAChD,yEAAyE;AACzE,wCAAwC;AACxC,kEAAkE;AAClE,wDAAwD;AACxD,6DAA6D;AAC7D,+BAA+B;AAC/B,0BAA0B;AAC1B,kCAAkC;AAClC,uFAAuF;AACvF,mBAAmB;AACnB,oCAAoC;AACpC,QAAQ;AAER,gBAAgB;AAChB,qCAAqC;AACrC,mCAAmC;AACnC,wCAAwC;AACxC,gCAAgC;AAChC,QAAQ;AAER,oBAAoB;AACpB,4CAA4C;AAC5C,yCAAyC;AACzC,8CAA8C;AAC9C,QAAQ;AACR,IAAI","file":"","sourceRoot":"/","sourcesContent":["// import { BundleName } from \"../common/BundleName\";\n// import { SoundPath } from \"../common/SoundPath\";\n// import StoryConfig, { StoryConfigMgr } from \"../config/StoryConfig\";\n// import { AbManager } from \"./AbManager\";\n// import { AudioManager } from \"./AudioManager\";\n// import DataManager from \"./DataManager\";\n\n// const { ccclass, property } = cc._decorator;\n\n// @ccclass\n// export default class StoryManager extends cc.Component {\n\n//     @property(cc.Node)\n//     storyNode: cc.Node = null;\n\n//     @property(cc.Label)\n//     storyLab: cc.Label = null;\n\n//     @property(cc.Node)\n//     tipNode: cc.Node = null;\n\n//     public static ins: StoryManager = null;\n\n//     private storyConfig: StoryConfig = null;\n//     private interval: number = 0;\n//     private resolve: (value: unknown) => void = null;\n//     protected readonly byteInterval: number = 100;\n//     private isOnByteAnim: boolean = false;\n//     private lv: number = 0;\n//     private group: number = 0;\n//     private step: number = 0;\n\n//     protected onLoad(): void {\n//         StoryManager.ins = this;\n//         this.storyNode.active = false;\n//     }\n\n//     init() {\n//         AbManager.loadBundleRes(BundleName.Font, \"方正隶二简体\", cc.Font).then(font => {\n//             this.storyLab.font = font;\n//         })\n//     }\n\n//     /**播放一组剧情 startCb/endCb:每句剧情 开始/结束 播放都会触发，返回当前storyConfig */\n//     playByGroup(lv: number, group: number, startCb?: (config: StoryConfig) => void, endCb?: (config: StoryConfig) => void) {\n//         return new Promise((resolve, reject) => {\n//             let index = 0;\n//             let storyArr = DataManager.ins.get(StoryConfigMgr).getStoryArrByLvGroup(lv, group);\n//             let playCall = () => {\n//                 let storyConfig = storyArr[index];\n//                 startCb && startCb(storyConfig);\n//                 this.playStory(lv, group, index, storyConfig).then(() => {\n//                     endCb && endCb(storyConfig);\n//                     index++;\n//                     if (index >= storyArr.length) {\n//                         resolve(null);\n//                     } else {\n//                         playCall();\n//                     }\n//                 })\n//             }\n//             playCall();\n//         })\n//     }\n\n//     playStory(lv: number, group: number, step: number, storyConfig: StoryConfig) {\n//         this.lv = lv;\n//         this.group = group;\n//         this.step = step;\n//         return new Promise((resolve, reject) => {\n//             this.storyConfig = storyConfig;\n//             if (!this.storyConfig) return resolve(null);\n//             this.storyAnim();\n//             this.resolve = resolve;\n//         })\n//     }\n\n//     storyAnim() {\n//         if (this.isOnByteAnim) return;\n//         let endCall = () => {\n//             this.storyNode.active = false;\n//             this.resolve && this.resolve(null);\n//         }\n//         this.storyNode.active = true;\n//         // this.isOnByteAnim = true;\n//         AudioManager.ins.stopAllEffect();\n//         let soundPath = SoundPath[\"lv_\" + this.lv + \"_\" + this.group + \"_\" + this.step];\n//         console.log(\"soundPath \", soundPath)\n//         if (soundPath) {\n//             AudioManager.ins.playEffect(soundPath, false, () => {\n//                 endCall();\n//             });\n//         } else {\n//             setTimeout(() => {\n//                 endCall();\n//             }, 2000);\n//         }\n//         this.storyLab.string = this.storyConfig.desc\n//         // let byteIndex = 0;\n//         // this.interval = setInterval(() => {\n//         //     if (byteIndex >= this.storyConfig.desc.length) {\n//         //         clearInterval(this.interval);\n//         //         this.isOnByteAnim = false;\n//         //         !soundPath && this.storyEndCb && this.storyEndCb();\n//         //         setTimeout(() => {\n//         //             UIManager.ins.isSceneBlockInput = false;\n//         //             this.storyNode.active = false;\n//         //             this.resolve && this.resolve(null);\n//         //         }, 2000);\n//         //     } else {\n//         //         byteIndex++;\n//         //         this.storyLab.string = this.storyConfig.desc.slice(0, byteIndex);\n//         //     }\n//         // }, this.byteInterval);\n//     }\n\n//     reset() {\n//         this.storyLab.string = \"\";\n//         this.storyConfig = null;\n//         clearInterval(this.interval);\n//         this.interval = null;\n//     }\n\n//     jumpClick() {\n//         AudioManager.ins.stopAllEffect();\n//         this.storyNode.active = false;\n//         this.resolve && this.resolve(null);\n//     }\n// }\n"]}