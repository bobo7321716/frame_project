{"version":3,"sources":["assets\\homePage\\script\\manager\\TaskManager.ts"],"names":[],"mappings":";;;;AAAA,wEAAwE;AACxE,gDAAgD;AAChD,qDAAqD;AACrD,6CAA6C;AAC7C,2DAA2D;AAC3D,2CAA2C;AAC3C,iDAAiD;AACjD,mDAAmD;AACnD,2CAA2C;AAE3C,+CAA+C;AAE/C,WAAW;AACX,0DAA0D;AAE1D,yCAAyC;AAEzC,6CAA6C;AAE7C,iCAAiC;AACjC,kCAAkC;AAClC,QAAQ;AAER,mBAAmB;AACnB,oCAAoC;AACpC,2CAA2C;AAC3C,kEAAkE;AAClE,wCAAwC;AACxC,wCAAwC;AACxC,mDAAmD;AACnD,6BAA6B;AAC7B,8BAA8B;AAC9B,sFAAsF;AACtF,yFAAyF;AACzF,4BAA4B;AAC5B,iCAAiC;AACjC,8BAA8B;AAC9B,oHAAoH;AACpH,6EAA6E;AAC7E,yFAAyF;AACzF,4BAA4B;AAC5B,iCAAiC;AACjC,oBAAoB;AACpB,gBAAgB;AAChB,aAAa;AACb,qCAAqC;AACrC,QAAQ;AAER,mBAAmB;AACnB,0BAA0B;AAC1B,8DAA8D;AAC9D,oDAAoD;AACpD,2CAA2C;AAC3C,0BAA0B;AAC1B,qHAAqH;AACrH,6DAA6D;AAC7D,6BAA6B;AAC7B,0BAA0B;AAC1B,6FAA6F;AAC7F,iEAAiE;AACjE,6BAA6B;AAC7B,gBAAgB;AAChB,aAAa;AACb,4DAA4D;AAC5D,QAAQ;AAER,iBAAiB;AACjB,+BAA+B;AAC/B,8DAA8D;AAC9D,kFAAkF;AAClF,iCAAiC;AACjC,8DAA8D;AAC9D,uDAAuD;AACvD,yCAAyC;AACzC,qGAAqG;AACrG,gCAAgC;AAChC,kGAAkG;AAClG,gBAAgB;AAChB,YAAY;AACZ,QAAQ;AAER,2BAA2B;AAC3B,6DAA6D;AAC7D,oDAAoD;AACpD,sDAAsD;AACtD,8CAA8C;AAC9C,oDAAoD;AACpD,0EAA0E;AAC1E,iCAAiC;AACjC,iDAAiD;AACjD,+BAA+B;AAC/B,kDAAkD;AAClD,wBAAwB;AACxB,qBAAqB;AACrB,gBAAgB;AAChB,aAAa;AACb,qCAAqC;AACrC,iFAAiF;AACjF,oCAAoC;AACpC,aAAa;AACb,4DAA4D;AAC5D,+CAA+C;AAC/C,QAAQ;AACR,IAAI","file":"","sourceRoot":"/","sourcesContent":["// import RewardView from \"../../../part1/script/RewardView/RewardView\";\n// import { EventEnum } from \"../common/Global\";\n// import { PlayerData } from \"../common/PlayerData\";\n// import { UiPath } from \"../common/UiPath\";\n// import Gs_task, { Gs_taskMgr } from \"../config/Gs_task\";\n// import DataManager from \"./DataManager\";\n// import { EventManager } from \"./EventManager\";\n// import RedPointManager from \"./RedPointManager\";\n// import { UIManager } from \"./UIManager\";\n\n// const { ccclass, property } = cc._decorator;\n\n// @ccclass\n// export default class TaskManager extends cc.Component {\n\n//     private taskDatas: Gs_task[] = [];\n\n//     public static ins: TaskManager = null;\n\n//     protected onLoad(): void {\n//         TaskManager.ins = this;\n//     }\n\n//     /**获取新手任务 */\n//     public getNewUserTaskList() {\n//         PlayerData.ins.curTaskList = [];\n//         this.taskDatas = DataManager.ins.get(Gs_taskMgr).datas;\n//         this.taskDatas.forEach(v => {\n//             if (v.Unlock_Condition) {\n//                 switch (v.Unlock_Condition.id) {\n//                     //角色等级\n//                     case 1:\n//                         if (PlayerData.ins.playerLevel >= v.Unlock_Condition.num) {\n//                             PlayerData.ins.curTaskList.push({ task: v, progress: 0 });\n//                         }\n//                         break;\n//                     case 2:\n//                         let info = PlayerData.ins.unlockBoothInfos.find(vl => vl.type == v.Unlock_Condition.num);\n//                         if (info && info.lv >= v.Unlock_Condition.value) {\n//                             PlayerData.ins.curTaskList.push({ task: v, progress: 0 });\n//                         }\n//                         break;\n//                 }\n//             }\n//         })\n//         PlayerData.ins.saveData();\n//     }\n\n//     /**更新任务进度 */\n//     refreshTaskList() {\n//         if (PlayerData.ins.curTaskList.length <= 0) return;\n//         PlayerData.ins.curTaskList.forEach(v => {\n//             switch (v.task.Param.type) {\n//                 case 1:\n//                     let subInfo = PlayerData.ins.getSubBoothInfoBySubBuildId(v.task.Param.id, v.task.Param.value);\n//                     v.progress = subInfo ? subInfo.lv : 0;\n//                     break;\n//                 case 2:\n//                     let boothInfo = PlayerData.ins.getBoothInfoByBuildId(v.task.Param.id);\n//                     v.progress = boothInfo ? boothInfo.lv : 0;\n//                     break;\n//             }\n//         })\n//         EventManager.triggerEvent(EventEnum.RefreshTask);\n//     }\n\n//     /**完成任务 */\n//     finishTask(id: number) {\n//         if (PlayerData.ins.curTaskList.length <= 0) return;\n//         let index = PlayerData.ins.curTaskList.findIndex(v => v.task.Id == id);\n//         if (index < 0) return;\n//         let taskConfig = PlayerData.ins.curTaskList[index];\n//         PlayerData.ins.curTaskList.splice(index, 1);\n//         if (taskConfig.task.Next_Id) {\n//             let nextConfig = DataManager.ins.get(Gs_taskMgr).getDataById(taskConfig.task.Next_Id);\n//             if (nextConfig) {\n//                 PlayerData.ins.curTaskList.splice(index, 0, { task: nextConfig, progress: 0 });\n//             }\n//         }\n//     }\n\n//     getAllFinishTask() {\n//         let rewardArr: { id: number, num: number }[] = [];\n//         PlayerData.ins.curTaskList.forEach(v => {\n//             if (v.progress >= v.task.Param.value) {\n//                 this.finishTask(v.task.Id);\n//                 v.task.Raward.forEach(reward => {\n//                     let obj = rewardArr.find(el => el.id == reward.id);\n//                     if (obj) {\n//                         obj.num += reward.num;\n//                     } else {\n//                         rewardArr.push(reward);\n//                     }\n//                 })\n//             }\n//         })\n//         PlayerData.ins.saveData();\n//         UIManager.ins.openView(UiPath.RewardView).then((view: RewardView) => {\n//             view.init(rewardArr);\n//         })\n//         EventManager.triggerEvent(EventEnum.RefreshTask);\n//         RedPointManager.ins.checkRedPoint();\n//     }\n// }\n"]}